{
	"Print to console": {
		"prefix": "clg",
		"body": [
			"console.log('$0')"
		],
		"description": "Log output to console"
	},
	"Print error to console": {
		"prefix": "cle",
		"body": [
			"console.error('There is an error', error)"
		],
		"description": "Log error to console"
	},
	"Clear console": {
		"prefix": "clc",
		"body": [
			"console.clear()"
		],
		"description": "clear console"
	},
	"Function": {
		"prefix": "func",
		"body": [
			"methodName(event) {",
			"$0",
			"}"
		],
		"description": "js class function"
	},
	"Export Default Class": {
		"prefix": "edc",
		"body": [
			"export default class Service {",
			"$0",
			"}"
		],
		"description": "export default class"
	},
	"Wire Method": {
		"prefix": "wrmt",
		"body": [
			"@wire(methodToWire, { param: '$' })",
			"methodName(result) {",
			"    const { data, error } = result",
			"    if (data) {",
			"       $0",
			"    } else if (error) {",
			"        console.log('There is an error', JSON.stringify(error))",
			"        console.error('There is an error', error)",
			"    }",
			"}"
		],
		"description": "Wire method code"
	},
	"Wire getRecord": {
		"prefix": "getrec",
		"body": [
			"@wire(getRecord, { recordId: '$recordId', fields: FIELDS })",
			"getRecordHandler(result) {",
			"    const { data, error } = result",
			"    if (data) {",
			"       $0",
			"    } else if (error) {",
			"        console.log('There is an error', JSON.stringify(error))",
			"        console.error('There is an error', error)",
			"    }",
			"}"
		],
		"description": "Wire getRecord"
	},
	"Wire graphql": {
		"prefix": "wrgq",
		"body": [
			"@wire(graphql, {",
			"\tquery: gql`",
			"\t\tquery AccountInfo {",
			"\t\t\tuiapi {",
			"\t\t\t\tquery {",
			"\t\t\t\tAccount(where: { Name: { like: \"Account1\" } }) {",
			"\t\t\t\t\tedges {",
			"\t\t\t\t\t\tnode {",
			"\t\t\t\t\t\t\tName {",
			"\t\t\t\t\t\t\t\tvalue",
			"\t\t\t\t\t\t\t\tdisplayValue",
			"\t\t\t\t\t\t\t}",
			"\t\t\t\t\t\t}",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t}`",
			"})",
			"graphqlQueryResult(result) {",
			"this.graphqlData = result; // refreshGraphql() can be used with this",
			"}"
		],
		"description": "Wire graphql code"
	},
	"Add method Comment": {
		"prefix": "cmt",
		"body": [
			"/**",
			" * @description",
			" * @param {string} param1",
			" * @param {number} param1",
			" * @return na",
			" **/"
		],
		"description": "Method level comments"
	},
	"Add Class Comments": {
		"prefix": "clt",
		"body": [
			"/**",
			" * @description",
			" * @author Gurjit Singh",
			" * @date ${CURRENT_DAY_NAME}-$CURRENT_MONTH_NAME-${CURRENT_DATE}-$CURRENT_YEAR",
			" **/"
		],
		"description": "Class level comments"
	},
	"LDS get record": {
		"prefix": "imgr",
		"body": [
			"import { getRecord } from 'lightning/uiRecordApi'"
		],
		"description": "import get record"
	},
	"LDS create record": {
		"prefix": "imcr",
		"body": [
			"import { createRecord } from 'lightning/uiRecordApi'"
		],
		"description": "import create record"
	},
	"LDS update record": {
		"prefix": "imur",
		"body": [
			"import { updateRecord } from 'lightning/uiRecordApi'"
		],
		"description": "import update record"
	},
	"LDS delete record": {
		"prefix": "imdr",
		"body": [
			"import { deleteRecord } from 'lightning/uiRecordApi'"
		],
		"description": "import delete record"
	},
	"Import Apex": {
		"prefix": "imap",
		"body": [
			"import methodName from '@salesforce/apex/className.methodName'"
		],
		"description": "Import Apex"
	},
	"Import Custom Label": {
		"prefix": "imcl",
		"body": [
			"import labelName from '@salesforce/label/c.labelName'"
		],
		"description": "Import Custom Label"
	},
	"Import Static Resource": {
		"prefix": "imsr",
		"body": [
			"import RESOURCE_NAME from '@salesforce/resourceUrl/resourceName'"
		],
		"description": "Import Static Resource"
	},
	"Import sObject": {
		"prefix": "imob",
		"body": [
			"import SOBJECT_NAME from '@salesforce/schema/sObjectName'"
		],
		"description": "Import sObject"
	},
	"Import ShowToastEvent": {
		"prefix": "imst",
		"body": [
			"import { ShowToastEvent } from 'lightning/platformShowToastEvent';"
		],
		"description": "Import ShowToastEvent"
	},
	"Import load style load script": {
		"prefix": "imld",
		"body": [
			"import { loadStyle, loadScript } from 'lightning/platformResourceLoader';"
		],
		"description": "Import ShowToastEvent"
	},
	"Import getPicklistValues": {
		"prefix": "impv",
		"body": [
			"import { getPicklistValues } from 'lightning/uiObjectInfoApi'"
		],
		"description": "Import getPicklistValues"
	},
	"Import refreshApex": {
		"prefix": "imra",
		"body": [
			"import { refreshApex } from '@salesforce/apex'"
		],
		"description": "Import refreshApex"
	},
	"Import graphQL": {
		"prefix": "imgq",
		"body": [
			"import { gql, graphql, refreshGraphQL } from 'lightning/uiGraphQLApi'"
		],
		"description": "Import graphQL"
	},
	"Import navigation": {
		"prefix": "imna",
		"body": [
			"import { NavigationMixin } from 'lightning/navigation'"
		],
		"description": "Import navigation"
	},
	"Import file": {
		"prefix": "imf",
		"body": [
			"import fileName from './fileName'"
		],
		"description": "Import file"
	},
	"navigate to url": {
		"prefix": "nvur",
		"body": [
			"navigateToUr(url) {",
			"\tthis[NavigationMixin.Navigate]({",
			"\t\ttype: 'standard__webPage',",
			"\t\tattributes: {",
			"\t\t\turl",
			"\t\t}",
			"\t})",
			"}"
		],
		"description": "Import file"
	},
	"query select": {
		"prefix": "qsl",
		"body": [
			"this.template.querySelector(`[data-id='${targetId}']`)"
		],
		"description": "Query Selector"
	},
	"Show Toast Event Method": {
		"prefix": "toast",
		"body": [
			"showToast(title, message, variant) {",
			"\tconst event = new ShowToastEvent({",
			"\t\ttitle,",
			"\t\tmessage,",
			"\t\tvariant",
			"\t});",
			"\tthis.dispatchEvent(event);",
			"}"
		],
		"description": "Show toast event method"
	},
	"lightning out": {
		"prefix": "lgtout",
		"body": [
			"\\$Lightning.use(\"c:AuraAppName\", function () {",
			"\t\\$Lightning.createComponent(\"c:componentName\", {",
			"\t\t// make sure to create a div with id as  LightningContainer",
			"\t}, \"LightningContainer\", function (component) {",
			"\t\t//component created",
			"\t\tconst recordId = '{!\\$CurrentPage.parameters.id}'",
			"\t});",
			"});"
		],
		"description": "lightning out"
	},
	"dispatch custom event": {
		"prefix": "dce",
		"body": [
			"this.dispatchEvent(new CustomEvent('eventname', {",
			"\tdetail: $0data,",
			"\tbubbles: false,",
			"\tcomposed: false",
			"}))"
		],
		"description": "dispatch custom event"
	},
	"paginator": {
		"prefix": "paginator",
		"body": [
			"get disablePreviousButton() {",
			"\treturn this.currentPage == 1",
			"}",
			"",
			"get disableNextButton() {",
			"\treturn this.currentPage == this.totalPages",
			"}",
			"",
			"handleFirstPage() {",
			"\tthis.currentPage = 1",
			"\tthis.tableDataArrayToDisplay = this.tableDataArray",
			"\t\t.slice(0, numberOfRecordsPerPage)",
			"}",
			"",
			"handlePreviousPage() {",
			"\t--this.currentPage",
			"\tthis.tableDataArrayToDisplay = this.tableDataArray",
			"\t\t.slice(numberOfRecordsPerPage * (this.currentPage - 1), numberOfRecordsPerPage * this.currentPage)",
			"}",
			"",
			"handleNextPage() {",
			"\t++this.currentPage",
			"\tthis.tableDataArrayToDisplay = this.tableDataArray",
			"\t\t.slice(numberOfRecordsPerPage * (this.currentPage - 1), numberOfRecordsPerPage * this.currentPage)",
			"}",
			"",
			"handleLastPage() {",
			"\tthis.currentPage = this.totalPages",
			"\tlet startPoint = this.tableDataArray.length % numberOfRecordsPerPage || numberOfRecordsPerPage",
			"\tstartPoint = this.tableDataArray.length - startPoint - 1",
			"\tconst endPoint = this.tableDataArray.length - 1",
			"\tthis.tableDataArrayToDisplay = this.tableDataArray",
			"\t\t.slice(startPoint, endPoint)",
			"}"
		],
		"description": "Pagination code"
	},
	"Arrow function": {
		"prefix": "arrow",
		"body": [
			"const myMethod = () => {",
			"\t$0",
			"}"
		],
		"description": "Arrow method"
	},
	"event target value": {
		"prefix": "etv",
		"body": [
			"event.target.value"
		],
		"description": "event.target.value"
	},
	"event target checked": {
		"prefix": "etc",
		"body": [
			"event.target.checked"
		],
		"description": "event.target.value"
	},
	"event target dataset id": {
		"prefix": "etd",
		"body": [
			"event.target.dataset.id"
		],
		"description": "event.target.dataset.id"
	},
	"json stringify": {
		"prefix": "jst",
		"body": [
			"JSON.stringify($0)"
		],
		"description": "JSON.stringify()"
	},
	"json parse": {
		"prefix": "jsp",
		"body": [
			"JSON.parse($0)"
		],
		"description": "JSON.parse()"
	},
	"json parse stringify": {
		"prefix": "jspt",
		"body": [
			"JSON.parse(JSON.stringify($0))"
		],
		"description": "JSON.parse(JSON.stringify())"
	},
	"create record": {
		"prefix": "create",
		"body": [
			"const fields = {}",
			"fields[NAME_FIELD.fieldApiName] = name",
			"const recordInput = { fields };",
			"await createRecord(recordInput)"
		],
		"description": "LDS create record"
	},
	"update record": {
		"prefix": "update",
		"body": [
			"const fields = {}",
			"fields['Id'] = this.recordId;",
			"const recordInput = { fields };",
			"await updateRecord(recordInput)"
		],
		"description": "LDS update record"
	},
	"delete record": {
		"prefix": "delete",
		"body": [
			"deleteRecord(this.recordId)"
		],
		"description": "LDS delete record"
	},
	"try catch finally": {
		"prefix": "tcf",
		"body": [
			"try {",
			"\tthis.showSpinner = true",
			"$0",
			"} catch(error) {",
			"\tconsole.log('There is an error', JSON.stringify(error))",
			"\tconsole.error('There is an error', error)",
			"} finally {",
			"\tthis.showSpinner = false",
			"}"
		],
		"description": "try catch finally"
	},
	"getPicklistValues": {
		"prefix": "pick",
		"body": [
			"@wire(getPicklistValues, { recordTypeId: '012000000000000AAA', fieldApiName: NUMBER_OF_SIGNATURE_FIELD })",
			"getPicklistOptionsHandler(result) {",
			"\tconst { data, error } = result",
			"\tif (data) {",
			"\t\tthis.picklistOptions = data.values",
			"\t} else if (error) {",
			"\t\tconsole.log('There is an error', JSON.stringify(error))",
			"\t\tconsole.error('There is an error', error)",
			"\t}",
			"}"
		],
		"description": "getPicklistValues"
	},
	"logError": {
		"prefix": "log",
		"body": [
			"logError(error) {",
			"\tconsole.error('There is an error', error)",
			"\tconsole.log('There is an error', JSON.stringify(error))",
			"\tlet errorMessage = error.body?.output?.errors[0]?.message",
			"\terrorMessage = errorMessage || error.body?.pageErrors[0]?.message",
			"\terrorMessage = errorMessage || 'There is an error with this application, please check with your system administrator'",
			"\tthis.showToast('Error', errorMessage, 'error')",
			"}"
		],
		"description": "logError"
	},
	"Constructor": {
		"prefix": "con",
		"body": [
			"constructor(superMain) {",
			"\tmain = superMain",
			"}"
		],
		"description": "Constructor"
	},
	"Graph Query": {
		"prefix": "gqy",
		"body": [
			"gql`query queryName {",
			"\tuiapi {",
			"\t\tquery {",
			"\t\t\tAccount (where: { Id: { eq: \"${this.recordId}\" } } orderBy: { LastModifiedDate: { order: DESC } }  first: 1) {",
			"\t\t\t\tedges {",
			"\t\t\t\t\tnode {",
			"\t\t\t\t\t\tId",
			"\t\t\t\t\t\tName {",
			"\t\t\t\t\t\t\tvalue",
			"\t\t\t\t\t\t}",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"}`"
		],
		"description": "Graph Query"
	}
}