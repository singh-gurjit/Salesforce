{
	"Public void method": {
		"prefix": "pvm",
		"body": [
			"public void methodName$0() {",
			"",
			"}"
		],
		"description": "public void method"
	},
	"Public string method": {
		"prefix": "psm",
		"body": [
			"public string methodName$0() {",
			"\treturn null;",
			"}"
		],
		"description": "public string method"
	},
	"Public integer method": {
		"prefix": "pim",
		"body": [
			"public integer methodName$0() {",
			"\treturn null;",
			"}"
		],
		"description": "public integer method"
	},
	"Public List method": {
		"prefix": "plm",
		"body": [
			"public object[] methodName$0() {",
			"\treturn null;",
			"}"
		],
		"description": "public List method"
	},
	"Public Set method": {
		"prefix": "psem",
		"body": [
			"public Set methodName$0() {",
			"\treturn null;",
			"}"
		],
		"description": "public Set method"
	},
	"Public Map method": {
		"prefix": "pmm",
		"body": [
			"public Map<string, object> methodName$0() {",
			"\treturn null;",
			"}"
		],
		"description": "public Map method"
	},
	"Aura enabled method": {
		"prefix": "arm",
		"body": [
			"@AuraEnabled",
			"public static string methodName() {",
			"    return null;$0",
			"}"
		],
		"description": "Creates an Aura enabled method"
	},
	"Aura enabled method cacheable": {
		"prefix": "armc",
		"body": [
			"@AuraEnabled(cacheable = true)",
			"public static string methodName() {",
			"    return null;$0",
			"}"
		],
		"description": "Creates an Aura enabled method"
	},
	"Aura enabled property": {
		"prefix": "arp",
		"body": [
			"@AuraEnabled",
			"public static string propertyName { get; set; }"
		],
		"description": "Creates an Aura enabled property"
	},
	"System debug": {
		"prefix": "syd",
		"body": [
			"System.debug('$0');"
		],
		"description": "System debug"
	},
	"Add method Comment": {
		"prefix": "cmt",
		"body": [
			"/**",
			" * @description",
			" * @param param1",
			" * @param param1",
			" * @return na",
			" **/"
		],
		"description": "Method level comments"
	},
	"Add Class Comments": {
		"prefix": "clt",
		"body": [
			"/**",
			" * @description",
			" * @author Gurjit Singh",
			" **/"
		],
		"description": "Class level comments"
	},
	"Batch Class": {
		"prefix": "batch",
		"body": [
			"public class ${TM_FILENAME_BASE} implements Database.Batchable<sObject>{\n",
				
				"\tpublic Database.QueryLocator start(Database.BatchableContext batchableContext) {",
			
				  "\t\treturn Database.getQueryLocator([SELECT Id FROM Account]);",
				"\t}\n",
			 
				"\tpublic void execute(Database.BatchableContext batchableContext, List<sObject> scope) {",
			
					"\t\tfor(sObject data: scope) {",
			
					"\t\t}",
				"\t}\n",
			 
				"\tpublic void finish(Database.BatchableContext batchableContext) {\n",
			
				"\t}",
			"}"
		],
		"description": "Batch Class"
	},

	"Single Email": {
		"prefix": "singleEmail",
		"body": [
			"Messaging.SingleEmailMessage message = new Messaging.SingleEmailMessage();",
			"// Replace IDs with valid record IDs in your org.",
			"message.toAddresses   = new String[] { '003D000000QDexS', '003D000000QDfW5' };",
			"message.optOutPolicy  = 'FILTER';",
			"message.subject       = 'Opt Out Test Message';",
			"message.plainTextBody = 'This is the message body.';",
			"Messaging.SingleEmailMessage[] messages = new List<Messaging.SingleEmailMessage> {message};",
			"Messaging.SendEmailResult[] results     = Messaging.sendEmail(messages);"
		],
		"description": "Single Email"
	},
	"Save Resul": {
		"prefix": "saveResult",
		"body": [
			"Database.SaveResult[] saveResultArray = Database.insert(array, false);",

			"for (Database.SaveResult saveResult : saveResultArray) {",
				"\tif (saveResult.isSuccess()) {",
					"\t\t// Operation was successful, so get the ID of the record that was processed",
					"\t\tSystem.debug('Successfully inserted account. Account ID: ' + saveResult.getId());",
				"\t} else {",
					"\t\t// Operation failed, so get all errors",
					"\t\tfor(Database.Error error : saveResult.getErrors()) {",
						"\t\t\tSystem.debug('The following error has occurred.');",
						"\t\t\tSystem.debug(error.getStatusCode() + ': ' + error.getMessage());",
						"\t\t\tSystem.debug('Account fields that affected this error: ' + error.getFields());",
					"\t\t}",
				"\t}",
			"}"
		],
		"description": "Save Result"
	},
	"HTTP Request": {
		"prefix": "req",
		"body": [
			"HttpRequest request = new HttpRequest();",
     		"request.setEndpoint(endPointUrl);",
     		"request.setMethod('GET');",
			"request.setHeader('Authorization', authorizationHeader);\n",

    		"Http http = new Http();",
     		"HTTPResponse response = http.send(request);",
			"Integer statusCode = response.getStatusCode();",
			"if(200 == statusCode) {",
			"\tstring responseBody = response.getBody();",
			"} else {",
			"\tSystem.debug('statusCode '+statusCode);",
			"}"
		],
		"description": "HTTP Request"
	}
}